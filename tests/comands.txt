
npm init playwright@latest

-----------
playwright
-----------
1) page.locator('selector')
2) page.goto('url')
3) page.locator('selector').click()
4) locator.click()
5) page.click('selector')
6) page.locator('selector').check() // to click on checkbox and radio
7) page.locator('selector').fill('text') // enter value in text box
8) page.locator('selector').selectOption(visible text)
9) page.locator('selector').selectOption(value)
10) page.locator('selector').selectOption({index:number})
11) page.locator('selector').selectOption({value:text})
12) page.locator('selector').selectOption({visible:text})
13) page.locator('selector').selectOption([value-1,value-2,...])
14) page.locator('selector').selectOption([{value:value-1},{value:value-2},...])
15) page.$eval('selector',function) // return - single value
16) page.$$eval('selector',function) // return - multiple values and operate on multiple locator
17) page.locator('selector').textContent() // text of an element
18) page.title() // returns page title
19) page.url() // returns current url
20) page.locator('selector').innerText() // text of an element
21) page.locator('selector').first()
22) page.locator('selector').last()
23) page.locator('selector').nth(index)
24) page.frame('selector')
25) page.getByRole('selector',{name:'acc name'})
26) page.getByTitle('title attribute name')
27) page.getByLabel('label')
28) page.locator('').pressSequentially('text');
29) page.locator('').pressSequentially('text',{delay:100})
30) page.frames();
31) page.frame('name-locator of frame')
32) page.frame({url:'url'})
33) page.frameLocator("frame-locator")
34) page.frame('name').frameLocator('locator')
35) page.frame('name').childFrames()
36) page.locator('').click({button:"right"})
37) page.locator('').click({button:"left"})
38) page.locator('').click({button:"middle"})
39) page.locator('').hover()
40) page.locator('').click({force:true})
41) page.locator('type=file').setInputFiles("file location");

42)     const fileUploadLocator=page.locator('file type not mentioned');
        page.on("filechooser",function(fs){
            fs.setFiles('file location');
        })
        await fileUploadLocator.click();

43) const fileChooserPromise = page.waitForEvent('filechooser');
    await page.locator('').click();
    const fileChooser = await fileChooserPromise;
    await fileChooser.setFiles('file location');

    //await fileChooserPromise.setFiles('file location');

44) page.locator(sourceLocator).dragTo(page.locator(destinationLocator));

45) page.dragAndDrop(source, destination);

46)
    const browser= await chromium.launch({headless:false,channel:'chrome'});
    const context =await browser.newContext()
    const page = await context.newPage();
    //firefox
    //webkit

47) await page.press("Key"); // key: Enter,Tab, ArrowRight

48)
     const context =await browser.newContext();
     const page = await context.newPage();
     await page.goto("url");
     const pagePromise=context.waitForEvent('page')
     await page.locator('locator to new tab').click();
     const newPage = await pagePromise;
     console.log(newPage.title());

49) // get text of text box
    const textBoxValue = await page.locator('text box locator').inputValue();

50) DDT - csv
     npm install csv-parse
     import fs from 'fs'
     import path from 'path'
     import {parse} from 'csv-parse/sync'

     const testdata = parse(fs.readFileSync(path.join(__dirname,"../testdata/logintestdata.csv")),
         {
             columns:true,
             skip_empty_lines: true
         });

     for(let data of testdata){
        test('ddt test',async({page})=>{
            console.log(data.id);
            console.log(data.username);
            console.log(data.password);
        })
     }

51) DDT - Excel
     npm install xlsx
     import * as xlsx from "xlsx"
     import path from 'path'

     const workbook = xlsx.readFile(path.join(__dirname,"../testdata/logintestdataexcel.xlsx"));
     const sheet = workbook.Sheets(workbook.SheetNames[0]);
     const testdata = xlsx.util.sheet_to_json(sheet);

    for(let data of testdata){
            test('ddt test',async({page})=>{
             console.log(data.id);
             console.log(data.username);
             console.log(data.password);
            })
    }

52) DDT - json

    import testdata from '../testdata/testdata.json'
    for(let data of testdata){
                test('ddt test',async({page})=>{
                     console.log(data.id);
                     console.log(data.username);
                     console.log(data.password);
                })
    }

53) page.screenshot({path:'path to store screenshot'})
54) page.screenshot({path:'path to store screenshot',fullPage:true})
55) page.locator('selector').screenshot({path:'path to store screenshot'})
56) const bufferedScreenshot=await page.locator('selector').screenshot();
         cl(bufferedScreenshot.toString('base64));
57)









-------
jest - assertion
--------------
1) expect(title).toBe('title') // to exact match
2) expect(value).toBeTruthy() // boolean value comparison
3) expect(locator).toHaveValue('value');
4) expect(locator).toContainsText(text)
5) expect(locator).toBeVisible()



-----------
test -framework
-----------
1)test('test name',async function({fixture}){});
2)test.skip('test name',async function({fixture}){});  // skip
3)test.only('test name',async function({fixture}){}); // only test will be executed

4)
    test.describe('suite name',()=>{
        test('test name',async function({fixture}){});
    })

5)
    test.describe('suite name',()=>{
            test.beforeEach('name-optional',async({fixture}){});
            test('test name',async function({fixture}){});
            test.afterEach('name-optional',async({fixture}){});
        })

6)
    test.describe('suite name',()=>{
            test.before('name-optional',async({fixture}){});
            test('test name',async function({fixture}){});
            test.after('name-optional',async({fixture}){});
        })






----------
execution
----------

1) npx playwright test   // all test execution
2) npx playwright test test-name // specific test
3) npx playwright test test-name --headed // test in headless mode
4)

https://petstore.swagger.io/